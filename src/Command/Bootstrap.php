<?php

namespace Proctor\Command;

use Proctor\Proctor;
use Codeception\Lib\Generator\Helper;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputArgument;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;
use Symfony\Component\Process\Process;
use Symfony\Component\Process\ProcessBuilder;
use Symfony\Component\Yaml\Yaml;

/**
 * Bootstrap Proctor project.
 *
 * Much code lent from Codeceptions init command.
 */
class Bootstrap extends Command
{
    protected $actorSuffix = 'Tester';
    protected $helperDir = 'tests/_support';
    protected $logDir = 'tests/_output';
    protected $dataDir = 'tests/_data';

    protected function configure()
    {
        $this->setDescription('Creates default test suites and generates all requires files')
                ->addArgument(
                    'path',
                    InputArgument::OPTIONAL,
                    'Custom installation path',
                    '.'
                );
    }

    protected function execute(InputInterface $input, OutputInterface $output) {
        $vendor = dirname(dirname(dirname(dirname(__DIR__))));
        $binDir = realpath($vendor . '/bin');
        $binDir = realpath('./vendor/bin');

        $path = $input->getArgument('path');

        if (!is_dir($path)) {
            $output->writeln("<error>\nDirectory '$path' does not exist\n</error>");
            return;
        }

        $realpath = realpath($path);
        chdir($path);

        if (file_exists('codeception.dist.yml')) {
            $output->writeln("<error>\nProject is already initialized in '$path'\n</error>");
            return;
        }

        $output->writeln(
            "<fg=white;bg=magenta>Initializing Codeception in " . $realpath . "</fg=white;bg=magenta>\n"
        );

        $this->setup($output);

        file_put_contents('tests/_bootstrap.php', "<?php\n// This is global bootstrap for autoloading\n");
        $output->writeln("tests/_bootstrap.php written <- global bootstrap file");

        $output->writeln("<info>Building initial {$this->actorSuffix} classes</info>");

        $codecept = (new ProcessBuilder(array($binDir . '/codecept', 'build')))->getProcess();
        $codecept->mustRun(function ($type, $buffer) use ($output) {
            if (Process::ERR === $type) {
                $output->getErrorOutput()->write($buffer);
            } else {
                $output->write($buffer);
            }
        });

        $this->setupEyes($output);

        $output->writeln("<info>\nBootstrap is done. Check out " . $realpath . "/tests directory</info>");

    }

    protected function setup(OutputInterface $output)
    {
        $actor = 'Acceptance';
        $localHostname = 'localhost';
        $localPort = '8086';

        $basicConfig = array(
            'actor' => $this->actorSuffix,
            'paths'    => array(
                'tests'   => 'tests',
                'log'     => $this->logDir,
                'data'    => $this->dataDir,
                'helpers' => $this->helperDir
            ),
            'settings' => array(
                'bootstrap'    => '_bootstrap.php',
                'colors'       => (strtoupper(substr(PHP_OS, 0, 3)) != 'WIN'),
                'memory_limit' => '1024M'
            ),
            'modules'  => array(
            ),
            'extensions' => array(
                'enabled' => array('Codeception\Extension\PhpBuiltinServer'),
                'config' => array(
                    'Codeception\Extension\PhpBuiltinServer'  => array(
                        'hostname' => $localHostname,
                        'port' => $localPort,
                        'documentRoot' => './',
                        'startDelay' => '1',
                        'phpIni' => '/etc/php5/apache2/php.ini',
                    )
                )
            )
        );

        $str = "# Codeception global config file generated by Proctor\n";
        $str .= Yaml::dump($basicConfig, 4);
        file_put_contents('codeception.dist.yml', $str);
        $output->writeln("File codeception.dist.yml created       <- global configuration");

        @mkdir('tests');
        @mkdir($this->logDir);
        @mkdir($this->dataDir);
        @mkdir($this->helperDir);

        $suiteConfig = array(
            'class_name' => $actor . $this->actorSuffix,
            'modules'    => array(
                'enabled' => array('WebDriver', $actor . 'Helper'),
                'config'  => array(
                    'WebDriver' => array(
                        'url' => 'http://' . $localHostname . ':' . $localPort. '/',
                        'browser' => 'phantomjs'
                    ),
                ),
                'env' => array(
                    'phantom' => array(),
                    'chrome' => array(
                        'modules' => array(
                            'config' => array(
                                'WebDriver' => array('browser' => 'chrome')
                            )
                        ),
                    ),
                    'firefox' => array(
                        'modules' => array(
                            'config' => array(
                                'WebDriver' => array('browser' => 'firefox')
                            )
                        ),
                    )
                )
            ),
        );

        $str = "# Codeception Test Suite Configuration, generated by Proctor\n\n";
        $str .= "# suite for acceptance tests.\n";
        $str .= "# perform tests in browser using the WebDriver or PhpBrowser.\n";
        $str .= "# If you need both WebDriver and PHPBrowser tests - create a separate suite.\n\n";

        $str .= Yaml::dump($suiteConfig, 5);

        $suite = 'acceptance';
        @mkdir("tests/$suite");
        file_put_contents(
            "tests/$suite/_bootstrap.php",
            "<?php\n// Here you can initialize variables that will be available to your tests\n"
        );
        file_put_contents(
            $this->helperDir.DIRECTORY_SEPARATOR.$actor.'Helper.php',
            (new Helper($actor, ''))->produce()
        );
        file_put_contents("tests/$suite.suite.dist.yml", $str);

        $output->writeln("tests/acceptance created           <- acceptance tests");
        $output->writeln("tests/acceptance.suite.dist.yml written <- acceptance tests suite configuration");

        if (file_exists('.gitignore')) {
            file_put_contents('tests/_output/.gitignore', '');
            $gitignore = file_get_contents('.gitignore');
            if (strpos($gitignore, "tests/_output/*") === false) {
                file_put_contents('.gitignore', $gitignore . "\ntests/_output/*");
                $output->writeln("tests/_output was added to .gitignore");
            }
        }
    }

    /**
     * Install Eyes client.
     *
     * @todo this could be done better, updating being one case to be handled.
     */
    protected function setupEyes(OutputInterface $output)
    {
        $myDir = dirname(dirname(__DIR__));

        if (file_exists($myDir . '/monocular')) {
          return;
        }

        $output->writeln("<info>Installing Monocular</info>");
        $git = (new ProcessBuilder(array('git', 'clone', 'https://github.com/xendk/monocular.git')))->setWorkingDirectory($myDir)->getProcess();
        $git->mustRun(function ($type, $buffer) use ($output) {
            if (Process::ERR === $type) {
                $output->getErrorOutput()->write($buffer);
            } else {
                $output->write($buffer);
            }
        });

        $npm = (new ProcessBuilder(array('npm', 'install')))->setWorkingDirectory($myDir)->setWorkingDirectory($myDir . '/monocular')->getProcess();
        $npm->mustRun(function ($type, $buffer) use ($output) {
            if (Process::ERR === $type) {
                $output->getErrorOutput()->write($buffer);
            } else {
                $output->write($buffer);
            }
        });
    }
}
